datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String          @id @default(cuid())
  clerkId           String          @unique
  email             String          @unique
  name              String
  department        String
  role              UserRole        @default(EMPLOYEE)
  contributions     Contribution[]
  events            Event[]
  expenses         Expense[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  @@map("users")
}

model Contribution {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  amount            Float
  month             DateTime
  year              Int
  quarter           Int
  status            ContributionStatus @default(PENDING)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  
  // Indexes for faster aggregation
  @@index([userId, year, month])
  @@index([year, quarter])
  @@map("contributions")
}

model Event {
  id                Int             @id @default(autoincrement())
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  type              EventType
  title             String
  start             DateTime
  end               DateTime
  year              Int
  month             Int
  quarter           Int
  description       String?
  location          String?
  status            EventStatus     @default(ACTIVE)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  
  // Indexes for faster querying and aggregation
  @@index([type, year, month])
  @@index([year, quarter])
  @@map("events")
}

model Expense {
  id                Int             @id @default(autoincrement())
  type             ExpenseType
  amount           Float
  date             DateTime
  recipient        String
  description      String?
  approvedBy       String?         // Admin who approved the expense
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  status           ExpenseStatus   @default(APPROVED)
  userId           String?         // Optional link to related user
  user             User?           @relation(fields: [userId], references: [id])
}

enum ExpenseType {
  BIRTHDAY
  FUNERAL
  MARRIAGE
  CHILDBIRTH
  EMPLOYEE_DEPARTURE
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  EMPLOYEE
  ADMIN
}

enum ContributionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum EventType {
  BIRTHDAY
  FUNERAL
  CHILDBIRTH
  MARRIAGE
  OTHER
}

enum EventStatus {
  ACTIVE
  ARCHIVED
}