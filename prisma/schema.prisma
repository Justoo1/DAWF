
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  department    String?
  password      String         @default("")
  role          UserRole       @default(EMPLOYEE)
  isActive      Boolean        @default(true) // Track if employee is active or has resigned
  dateOfBirth   DateTime?      // Birthday for automatic birthday tracking
  contributions Contribution[]
  events        Event[]
  expenses      Expense[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())

  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Contribution {
  id        String             @id @default(cuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  amount    Float
  month     DateTime
  year      Int
  quarter   Int
  status    ContributionStatus @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now())
  // Indexes for faster aggregation
  @@index([userId, year, month])
  @@index([year, quarter])
  @@map("contributions")
}

model Event {
  id                    String         @id @default(cuid())
  userId                String
  user                  User        @relation(fields: [userId], references: [id])
  type                  EventType
  title                 String
  start                 DateTime
  end                   DateTime
  year                  Int
  month                 Int
  quarter               Int
  description           String?
  location              String?
  status                EventStatus @default(ACTIVE)
  emailNotificationSent Boolean     @default(false) // Track if notification email was sent
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @default(now())
  // Indexes for faster querying and aggregation
  @@index([type, year, month])
  @@index([year, quarter])
  @@map("events")
}

model Expense {
  id          Int           @id @default(autoincrement())
  type        ExpenseType
  amount      Float
  date        DateTime
  recipient   String
  description String?
  approvedBy  String? // Admin who approved the expense
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  status      ExpenseStatus @default(APPROVED)
  userId      String? // Optional link to related user
  user        User?         @relation(fields: [userId], references: [id])
}

enum ExpenseType {
  BIRTHDAY
  FUNERAL
  MARRIAGE
  CHILDBIRTH
  EMPLOYEE_DEPARTURE
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  EMPLOYEE
  ADMIN
}

enum ContributionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum EventType {
  BIRTHDAY
  FUNERAL
  CHILDBIRTH
  MARRIAGE
  OTHER
}

enum EventStatus {
  ACTIVE
  ARCHIVED
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Policy {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique // URL-friendly identifier
  content     String   @db.Text // Store HTML or Markdown content
  version     Int      @default(1)
  isActive    Boolean  @default(true)
  updatedBy   String? // Email of admin who updated
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("policies")
}
